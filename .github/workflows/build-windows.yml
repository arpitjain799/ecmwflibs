# (C) Copyright 2020 ECMWF.
#
# This software is licensed under the terms of the Apache Licence Version 2.0
# which can be obtained at http://www.apache.org/licenses/LICENSE-2.0.
# In applying this licence, ECMWF does not waive the privileges and immunities
# granted to it by virtue of its status as an intergovernmental organisation
# nor does it submit to any jurisdiction.

name: Build Windows

on:
  push:
    branches: [ master ]

  # pull_request:
  #  branches: [ master ]

  release:
    types: [created]

jobs:

  build:

    runs-on: windows-latest
    strategy:
      fail-fast: true
      matrix:
        # python-version: ["3.6", "3.7", "3.8"]
        # architecture: ["x86", "x64"]
        python-version: ["3.8"]
        architecture: ["x64"]

    defaults:
      run:
        shell: bash

    name: Build with Python ${{ matrix.python-version }} ${{ matrix.architecture }}
    env:
      WINARCH: ${{ matrix.architecture }}

    steps:

      - uses: actions/checkout@v2

      - uses: seanmiddleditch/gha-setup-vsdevenv@master
        with:
          arch: ${{ matrix.architecture }}

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          architecture: ${{ matrix.architecture }}

      - name: Apply mirror
        if: false
        run: |
          import os
          a = "repo.msys2.org"
          b = "mirror.yandex.ru/mirrors/msys2"
          for root, _, files in os.walk("c:/vcpkg"):
              for f in files:
                if f.endswith(".cmake"):
                  path = os.path.join(root, f)
                  with open(path) as f:
                    text = f.read()
                    changed = text.replace(a, b)
                  if text != changed:
                    print("CHANGED", path)
                    with open(path, "w") as f:
                      f.write(changed)
        shell: python

      - name: Cache install tools
        # if: false
        uses: actions/cache@v2
        with:
          path: c:\vcpkg
          key: ${{ runner.os }}${{ matrix.architecture }}-tools-${{ hashFiles('make/tools-windows.make') }}

      - run: make tools

      - run: make udunits

      - run: make proj7

      - name: Get SHA1 from eccodes and magics
        run: tools/sha1.sh
        id: sha1

      - name: Cache compilations
        if: false
        uses: actions/cache@v2
        with:
          path: |
            src
            build-ecmwf
            install
          key: ${{ runner.os }}${{ matrix.architecture }}-cache-${{ hashFiles('make/VERSIONS.make') }}-${{ steps.sha1.outputs.eccodes }}-${{ steps.sha1.outputs.magics }}

      - run: make pull
      - run: make wheel

      - uses: actions/upload-artifact@v2
        with:
          name: wheel-windows-${{ matrix.python-version }}-${{ matrix.architecture }}
          path: dist/*

  test:
    # if: false
    needs: build
    runs-on: windows-latest
    strategy:
      fail-fast: true
      matrix:
        # python-version: ["3.6", "3.7", "3.8"]
        # architecture: ["x86", "x64"]
        python-version: ["3.8"]
        architecture: ["x64"]

    defaults:
      run:
        shell: bash

    name: Test with Python ${{ matrix.python-version }} ${{ matrix.architecture }}

    steps:

      - uses: actions/checkout@v2

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}
          architecture: ${{ matrix.architecture }}

      - uses: actions/download-artifact@v2
        with:
          name: wheel-windows-${{ matrix.python-version }}-${{ matrix.architecture }}

      - run: pip install *.whl

      - run: pip install -r tests/requirements.txt

      - run: pip freeze

      - name: Get some data
        run: |
          curl -L http://download.ecmwf.int/test-data/magics/2m_temperature.grib -o data.grib
          curl -L https://github.com/ecmwf/climetlab/raw/master/docs/examples/test.grib -o climetlab.grib
          curl -L https://github.com/ecmwf/climetlab/raw/master/docs/examples/test.nc -o climetlab.nc
          ls -l
        working-directory: tests

      - run: python test_climetlab.py #python -m trace --trace -C . test_climetlab.py
        working-directory: tests
        timeout-minutes: 2
      #   env:
      #     MAGPLUS_DEBUG: "true"
      #     MAGPLUS_DEV: "true"
      #     MAGPLUS_INFO: "true"
      #     ECCODES_DEBUG: "1"
      #     GRIB_API_DEBUG: "1"

      - run: pytest --verbose -s
        working-directory: tests
        timeout-minutes: 2

      - uses: actions/upload-artifact@v2
        with:
          name: tests-windows-${{ matrix.python-version }}-${{ matrix.architecture }}
          path: tests/*.png


  deploy:

    if: ${{ github.event_name == 'release' }}

    needs: [test, build]

    name: Deploy wheel ${{ matrix.python-version }} ${{ matrix.architecture }}

    runs-on: ubuntu-latest
    strategy:
      fail-fast: true
      matrix:
        # python-version: ["3.6", "3.7", "3.8"]
        # architecture: ["x86", "x64"]
        python-version: ["3.8"]
        architecture: ["x64"]

    steps:

      - name: Set up Python
        uses: actions/setup-python@v2
        with:
          python-version: ${{ matrix.python-version }}

      - run: pip install twine

      - uses: actions/download-artifact@v2
        with:
          name: wheel-windows-${{ matrix.python-version }}-${{ matrix.architecture }}

      - run: twine upload *.whl
        env:
          TWINE_USERNAME: ${{ secrets.PYPI_USERNAME }}
          TWINE_PASSWORD: ${{ secrets.PYPI_PASSWORD }}
